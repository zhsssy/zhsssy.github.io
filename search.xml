<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CS:APP: BombLab - include secret</title>
    <url>/2022/04/10/CS-APP-BombLab/</url>
    <content><![CDATA[<p><a href="http://csapp.cs.cmu.edu/3e/README-bomblab" target="_blank" rel="noopener">Bomb</a>Lab 是 CS:APP 的第二个 lab,  整个实验都在对二进制文件进行研究, 通过对二进制文件的分析得出最终结果, 拆除炸弹.</p>
<a id="more"></a>

<h2 id="source-code"><a href="#source-code" class="headerlink" title="source code"></a>source code</h2><p>自学材料中给出了 bomb.c 的参考代码, 用于了解大致结构</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/***************************************************************************</span><br><span class="hljs-comment"> * Dr. Evil's Insidious Bomb, Version 1.1</span><br><span class="hljs-comment"> * Copyright 2011, Dr. Evil Incorporated. All rights reserved.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * LICENSE:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Dr. Evil Incorporated (the PERPETRATOR) hereby grants you (the</span><br><span class="hljs-comment"> * VICTIM) explicit permission to use this bomb (the BOMB).  This is a</span><br><span class="hljs-comment"> * time limited license, which expires on the death of the VICTIM.</span><br><span class="hljs-comment"> * The PERPETRATOR takes no responsibility for damage, frustration,</span><br><span class="hljs-comment"> * insanity, bug-eyes, carpal-tunnel syndrome, loss of sleep, or other</span><br><span class="hljs-comment"> * harm to the VICTIM.  Unless the PERPETRATOR wants to take credit,</span><br><span class="hljs-comment"> * that is.  The VICTIM may not distribute this bomb source code to</span><br><span class="hljs-comment"> * any enemies of the PERPETRATOR.  No VICTIM may debug,</span><br><span class="hljs-comment"> * reverse-engineer, run "strings" on, decompile, decrypt, or use any</span><br><span class="hljs-comment"> * other technique to gain knowledge of and defuse the BOMB.  BOMB</span><br><span class="hljs-comment"> * proof clothing may not be worn when handling this program.  The</span><br><span class="hljs-comment"> * PERPETRATOR will not apologize for the PERPETRATOR's poor sense of</span><br><span class="hljs-comment"> * humor.  This license is null and void where the BOMB is prohibited</span><br><span class="hljs-comment"> * by law.</span><br><span class="hljs-comment"> ***************************************************************************/</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"support.h"</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"phases.h"</span></span><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * Note to self: Remember to erase this file so my victims will have no</span><br><span class="hljs-comment"> * idea what is going on, and so they will all blow up in a</span><br><span class="hljs-comment"> * spectaculary fiendish explosion. -- Dr. Evil </span><br><span class="hljs-comment"> */</span><br><br>FILE *infile;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> *input;<br><br>    <span class="hljs-comment">/* Note to self: remember to port this bomb to Windows and put a </span><br><span class="hljs-comment">     * fantastic GUI on it. */</span><br><br>    <span class="hljs-comment">/* When run with no arguments, the bomb reads its input lines </span><br><span class="hljs-comment">     * from standard input. */</span><br>    <span class="hljs-keyword">if</span> (argc == <span class="hljs-number">1</span>) &#123;  <br>	infile = <span class="hljs-built_in">stdin</span>;<br>    &#125; <br><br>    <span class="hljs-comment">/* When run with one argument &lt;file&gt;, the bomb reads from &lt;file&gt; </span><br><span class="hljs-comment">     * until EOF, and then switches to standard input. Thus, as you </span><br><span class="hljs-comment">     * defuse each phase, you can add its defusing string to &lt;file&gt; and</span><br><span class="hljs-comment">     * avoid having to retype it. */</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (argc == <span class="hljs-number">2</span>) &#123;<br>	<span class="hljs-keyword">if</span> (!(infile = fopen(argv[<span class="hljs-number">1</span>], <span class="hljs-string">"r"</span>))) &#123;<br>	    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s: Error: Couldn't open %s\n"</span>, argv[<span class="hljs-number">0</span>], argv[<span class="hljs-number">1</span>]);<br>	    <span class="hljs-built_in">exit</span>(<span class="hljs-number">8</span>);<br>	&#125;<br>    &#125;<br><br>    <span class="hljs-comment">/* You can't call the bomb with more than 1 command line argument. */</span><br>    <span class="hljs-keyword">else</span> &#123;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Usage: %s [&lt;input_file&gt;]\n"</span>, argv[<span class="hljs-number">0</span>]);<br>	<span class="hljs-built_in">exit</span>(<span class="hljs-number">8</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* Do all sorts of secret stuff that makes the bomb harder to defuse. */</span><br>    initialize_bomb();<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Welcome to my fiendish little bomb. You have 6 phases with\n"</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"which to blow yourself up. Have a nice day!\n"</span>);<br><br>    <span class="hljs-comment">/* Hmm...  Six phases must be more secure than one phase! */</span><br>    input = read_line();             <span class="hljs-comment">/* Get input                   */</span><br>    phase_1(input);                  <span class="hljs-comment">/* Run the phase               */</span><br>    phase_defused();                 <span class="hljs-comment">/* Drat!  They figured it out!</span><br><span class="hljs-comment">				      * Let me know how they did it. */</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Phase 1 defused. How about the next one?\n"</span>);<br><br>    <span class="hljs-comment">/* The second phase is harder.  No one will ever figure out</span><br><span class="hljs-comment">     * how to defuse this... */</span><br>    input = read_line();<br>    phase_2(input);<br>    phase_defused();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"That's number 2.  Keep going!\n"</span>);<br><br>    <span class="hljs-comment">/* I guess this is too easy so far.  Some more complex code will</span><br><span class="hljs-comment">     * confuse people. */</span><br>    input = read_line();<br>    phase_3(input);<br>    phase_defused();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Halfway there!\n"</span>);<br><br>    <span class="hljs-comment">/* Oh yeah?  Well, how good is your math?  Try on this saucy problem! */</span><br>    input = read_line();<br>    phase_4(input);<br>    phase_defused();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"So you got that one.  Try this one.\n"</span>);<br>    <br>    <span class="hljs-comment">/* Round and 'round in memory we go, where we stop, the bomb blows! */</span><br>    input = read_line();<br>    phase_5(input);<br>    phase_defused();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Good work!  On to the next...\n"</span>);<br><br>    <span class="hljs-comment">/* This phase will never be used, since no one will get past the</span><br><span class="hljs-comment">     * earlier ones.  But just in case, make this one extra hard. */</span><br>    input = read_line();<br>    phase_6(input);<br>    phase_defused();<br><br>    <span class="hljs-comment">/* Wow, they got it!  But isn't something... missing?  Perhaps</span><br><span class="hljs-comment">     * something they overlooked?  Mua ha ha ha ha! */</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<h2 id="prepare"><a href="#prepare" class="headerlink" title="prepare"></a>prepare</h2><ul>
<li>gdb常用命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">gdb tui #使用命令行图形界面<br>tui enable/disable # 开启 tui 调试<br>break $ #断点<br>delete $ #删除断点<br>si # 逐条运行指令<br>s $ # 向下运行<br>n $ # 向下运行<br>i r #查看寄存器<br>x/2wd $rsp #打印 rsp 地址所在的两个w大小的10进制数.  gdb中运行 help x 有详细说明<br>info stack # 栈信息<br>Ctrl+l # 刷新terminal,避免乱码<br><span class="hljs-meta">#</span><span class="bash"> tui 相关命令</span><br>layout asm # 反汇编源码<br>layout regs # 寄存器相关数据<br>layout src # 源代码<br>Ctrl+x o #切换layout<br>Ctrl+x 2 # 使用两个layout<br></code></pre></div></td></tr></table></figure>

<ul>
<li><p>tmux</p>
<p>使用 tmux 方便查看源代码以及汇编代码的同时调试.</p>
</li>
</ul>
<h2 id="phase-1"><a href="#phase-1" class="headerlink" title="phase 1"></a>phase 1</h2><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs assembly">0x400ee0 &lt;+0&gt;:     sub    $0x8,%rsp<br>0x400ee4 &lt;+4&gt;:     mov    $0x402400,%esi<br>0x400ee9 &lt;+9&gt;:     call   0x401338 &lt;strings_not_equal&gt;<br>0x400eee &lt;+14&gt;:    test   %eax,%eax<br>0x400ef0 &lt;+16&gt;:    je     0x400ef7 &lt;phase_1+23&gt;<br>0x400ef2 &lt;+18&gt;:    call   0x40143a &lt;explode_bomb&gt;<br>0x400ef7 &lt;+23&gt;:    add    $0x8,%rsp<br>0x400efb &lt;+27&gt;:    ret<br></code></pre></div></td></tr></table></figure>

<p>观察 phase_1</p>
<p>将 <em>$0x402400</em> 放入 <em>esi</em> 后, 跳转到strings_not_equal 函数,与输入对比是否相同</p>
<p>使用 <em>x/s 0x402400</em> 得到这个地址的值为: Border relations with Canada have never been better.</p>
<h2 id="phase-2"><a href="#phase-2" class="headerlink" title="phase 2"></a>phase 2</h2><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs assembly">0x400efc &lt;+0&gt;:     push   %rbp<br>0x400efd &lt;+1&gt;:     push   %rbx<br>0x400efe &lt;+2&gt;:     sub    $0x28,%rsp<br>0x400f02 &lt;+6&gt;:     mov    %rsp,%rsi<br>0x400f05 &lt;+9&gt;:     call   0x40145c &lt;read_six_numbers&gt;<br>0x400f0a &lt;+14&gt;:    cmpl   $0x1,(%rsp)<br>0x400f0e &lt;+18&gt;:    je     0x400f30 &lt;phase_2+52&gt;<br>0x400f10 &lt;+20&gt;:    call   0x40143a &lt;explode_bomb&gt;<br>0x400f15 &lt;+25&gt;:    jmp    0x400f30 &lt;phase_2+52&gt;<br>0x400f17 &lt;+27&gt;:    mov    -0x4(%rbx),%eax<br>0x400f1a &lt;+30&gt;:    add    %eax,%eax<br>0x400f1c &lt;+32&gt;:    cmp    %eax,(%rbx)<br>0x400f1e &lt;+34&gt;:    je     0x400f25 &lt;phase_2+41&gt;<br>0x400f20 &lt;+36&gt;:    call   0x40143a &lt;explode_bomb&gt;<br>0x400f25 &lt;+41&gt;:    add    $0x4,%rbx<br>0x400f29 &lt;+45&gt;:    cmp    %rbp,%rbx<br>0x400f2c &lt;+48&gt;:    jne    0x400f17 &lt;phase_2+27&gt;<br>0x400f2e &lt;+50&gt;:    jmp    0x400f3c &lt;phase_2+64&gt;<br>0x400f30 &lt;+52&gt;:    lea    0x4(%rsp),%rbx<br>0x400f35 &lt;+57&gt;:    lea    0x18(%rsp),%rbp<br>0x400f3a &lt;+62&gt;:    jmp    0x400f17 &lt;phase_2+27&gt;<br>0x400f3c &lt;+64&gt;:    add    $0x28,%rsp<br>0x400f40 &lt;+68&gt;:    pop    %rbx<br>0x400f41 &lt;+69&gt;:    pop    %rbp<br>0x400f42 &lt;+70&gt;:    ret<br></code></pre></div></td></tr></table></figure>

<p>观察函数 发现 read_six_numbers, 跳转到 read_six_numbers 的反汇编, 了解到这个函数读入6个数字.</p>
<p>&lt;+14&gt; 将第一个参数与 1 对比,如果不等于 1 则结束,所以输入的第一个数为 1</p>
<p>&lt;+27&gt; - &lt;+32&gt; 将下一个参数 *=2. 如果下一个参数不等于上一个参数的两倍, 则结束</p>
<p>&lt;+36&gt; 为跳出循环条件, 如果每个参数都比较完毕则退出</p>
<p>总上可以得出答案: 1 2 4 8 16 32</p>
<h2 id="phase-3"><a href="#phase-3" class="headerlink" title="phase 3"></a>phase 3</h2><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs assembly">0x400f43 &lt;+0&gt;:     sub    $0x18,%rsp<br>0x400f47 &lt;+4&gt;:     lea    0xc(%rsp),%rcx<br>0x400f4c &lt;+9&gt;:     lea    0x8(%rsp),%rdx<br>0x400f51 &lt;+14&gt;:    mov    $0x4025cf,%esi<br>0x400f56 &lt;+19&gt;:    mov    $0x0,%eax<br>0x400f5b &lt;+24&gt;:    call   0x400bf0 &lt;__isoc99_sscanf@plt&gt;<br>0x400f60 &lt;+29&gt;:    cmp    $0x1,%eax<br>0x400f63 &lt;+32&gt;:    jg     0x400f6a &lt;phase_3+39&gt;<br>0x400f65 &lt;+34&gt;:    call   0x40143a &lt;explode_bomb&gt;<br>0x400f6a &lt;+39&gt;:    cmpl   $0x7,0x8(%rsp)<br>0x400f6f &lt;+44&gt;:    ja     0x400fad &lt;phase_3+106&gt;<br>0x400f71 &lt;+46&gt;:    mov    0x8(%rsp),%eax<br>0x400f75 &lt;+50&gt;:    jmp    *0x402470(,%rax,8)<br>0x400f7c &lt;+57&gt;:    mov    $0xcf,%eax<br>0x400f81 &lt;+62&gt;:    jmp    0x400fbe &lt;phase_3+123&gt;<br>0x400f83 &lt;+64&gt;:    mov    $0x2c3,%eax<br>0x400f88 &lt;+69&gt;:    jmp    0x400fbe &lt;phase_3+123&gt;<br>0x400f8a &lt;+71&gt;:    mov    $0x100,%eax<br>0x400f8f &lt;+76&gt;:    jmp    0x400fbe &lt;phase_3+123&gt;<br>0x400f91 &lt;+78&gt;:    mov    $0x185,%eax<br>0x400f96 &lt;+83&gt;:    jmp    0x400fbe &lt;phase_3+123&gt;<br>0x400f98 &lt;+85&gt;:    mov    $0xce,%eax<br>0x400f9d &lt;+90&gt;:    jmp    0x400fbe &lt;phase_3+123&gt;<br>0x400f9f &lt;+92&gt;:    mov    $0x2aa,%eax<br>0x400fa4 &lt;+97&gt;:    jmp    0x400fbe &lt;phase_3+123&gt;<br>0x400fa6 &lt;+99&gt;:    mov    $0x147,%eax<br>0x400fab &lt;+104&gt;:   jmp    0x400fbe &lt;phase_3+123&gt;<br>0x400fad &lt;+106&gt;:   call   0x40143a &lt;explode_bomb&gt;<br>0x400fb2 &lt;+111&gt;:   mov    $0x0,%eax<br>0x400fb7 &lt;+116&gt;:   jmp    0x400fbe &lt;phase_3+123&gt;<br>0x400fb9 &lt;+118&gt;:   mov    $0x137,%eax<br>0x400fbe &lt;+123&gt;:   cmp    0xc(%rsp),%eax<br>0x400fc2 &lt;+127&gt;:   je     0x400fc9 &lt;phase_3+134&gt;<br>0x400fc4 &lt;+129&gt;:   call   0x40143a &lt;explode_bomb&gt;<br>0x400fc9 &lt;+134&gt;:   add    $0x18,%rsp<br>0x400fcd &lt;+138&gt;:   ret<br></code></pre></div></td></tr></table></figure>

<p>根据 +24 行 <em>sscanf</em> 的特性可知 <em>rcx</em>, <em>rdx</em> 的内容为 sscanf 的两个参数.</p>
<p><em>x/s 0x4025cf</em> 得到为 “%d %d”,所以输入的两个参数都是整数.</p>
<p>+29 可得必须输入两个以上参数, +39 可得第一个参数必须小于8.</p>
<p>+46 到 +50 将第一个参数放入 eax , 同时根据 eax 的值跳转到相应部分,判断第二个参数的值.</p>
<p>以 7,327 为例, 跳转到 +118 后.第二个参数 <em>0xc($rsp)</em> 与 <em>%eax</em> 对比.</p>
<p>本题答案不唯一, 共有 7 组.</p>
<p>[0, 0xcf], [1,0x137h], [2,0x2c3], [3, 0x100], [4, 0x185], [5, 0xce], [6, 0x2aa], [7, 0x147h]</p>
<p>由于 sscanf 格式的要求, 输入的时候第二位要转换成十进制,例如 7 327 .</p>
<h2 id="phase-4"><a href="#phase-4" class="headerlink" title="phase 4"></a>phase 4</h2><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs assembly">0x40100c &lt;+0&gt;:     sub    $0x18,%rsp<br>0x401010 &lt;+4&gt;:     lea    0xc(%rsp),%rcx<br>0x401015 &lt;+9&gt;:     lea    0x8(%rsp),%rdx<br>0x40101a &lt;+14&gt;:    mov    $0x4025cf,%esi<br>0x40101f &lt;+19&gt;:    mov    $0x0,%eax<br>0x401024 &lt;+24&gt;:    call   0x400bf0 &lt;__isoc99_sscanf@plt&gt;<br>0x401029 &lt;+29&gt;:    cmp    $0x2,%eax<br>0x40102c &lt;+32&gt;:    jne    0x401035 &lt;phase_4+41&gt;<br>0x40102e &lt;+34&gt;:    cmpl   $0xe,0x8(%rsp)<br>0x401033 &lt;+39&gt;:    jbe    0x40103a &lt;phase_4+46&gt;<br>0x401035 &lt;+41&gt;:    call   0x40143a &lt;explode_bomb&gt;<br>0x40103a &lt;+46&gt;:    mov    $0xe,%edx<br>0x40103f &lt;+51&gt;:    mov    $0x0,%esi<br>0x401044 &lt;+56&gt;:    mov    0x8(%rsp),%edi<br>0x401048 &lt;+60&gt;:    call   0x400fce &lt;func4&gt;<br>0x40104d &lt;+65&gt;:    test   %eax,%eax<br>0x40104f &lt;+67&gt;:    jne    0x401058 &lt;phase_4+76&gt;<br>0x401051 &lt;+69&gt;:    cmpl   $0x0,0xc(%rsp)<br>0x401056 &lt;+74&gt;:    je     0x40105d &lt;phase_4+81&gt;<br>0x401058 &lt;+76&gt;:    call   0x40143a &lt;explode_bomb&gt;<br>0x40105d &lt;+81&gt;:    add    $0x18,%rsp<br>0x401061 &lt;+85&gt;:    ret    <br><br>func4:<br>0x400fce &lt;+0&gt;:     sub    $0x8,%rsp<br>0x400fd2 &lt;+4&gt;:     mov    %edx,%eax<br>0x400fd4 &lt;+6&gt;:     sub    %esi,%eax<br>0x400fd6 &lt;+8&gt;:     mov    %eax,%ecx     <br>0x400fd8 &lt;+10&gt;:    shr    $0x1f,%ecx<br>0x400fdb &lt;+13&gt;:    add    %ecx,%eax<br>0x400fdd &lt;+15&gt;:    sar    %eax<br>0x400fdf &lt;+17&gt;:    lea    (%rax,%rsi,1),%ecx<br>0x400fe2 &lt;+20&gt;:    cmp    %edi,%ecx<br>0x400fe4 &lt;+22&gt;:    jle    0x400ff2 &lt;func4+36&gt;<br>0x400fe6 &lt;+24&gt;:    lea    -0x1(%rcx),%edx<br>0x400fe9 &lt;+27&gt;:    call   0x400fce &lt;func4&gt;<br>0x400fee &lt;+32&gt;:    add    %eax,%eax<br>0x400ff0 &lt;+34&gt;:    jmp    0x401007 &lt;func4+57&gt;<br>0x400ff2 &lt;+36&gt;:    mov    $0x0,%eax<br>0x400ff7 &lt;+41&gt;:    cmp    %edi,%ecx<br>0x400ff9 &lt;+43&gt;:    jge    0x401007 &lt;func4+57&gt;<br>0x400ffb &lt;+45&gt;:    lea    0x1(%rcx),%esi<br>0x400ffe &lt;+48&gt;:    call   0x400fce &lt;func4&gt;<br>0x401003 &lt;+53&gt;:    lea    0x1(%rax,%rax,1),%eax<br>0x401007 &lt;+57&gt;:    add    $0x8,%rsp<br>0x40100b &lt;+61&gt;:    ret<br></code></pre></div></td></tr></table></figure>

<p>+0 到 +32 的部分和 phase_3 相同, 读入两个参数.</p>
<p>使用 <em>x/s 0x4025cf</em> 得 “%d %d”, 参数为两个整数, 在 +34 中可知第一个参数 0 &lt;= x &lt;= 14</p>
<p>+65 判断调用 fun4 后的返回值是否为0, +69 判断第二个参数是否为0, 所以可得第二个参数一定为0 </p>
<p><del>fun4 是一个递归函数, 通过模拟得到 1 0 是正确的</del></p>
<p>当时做完只是试出了一组答案就没有往下深究.</p>
<p>在写这篇文章时,模拟 fun4 的步骤, 查阅 csapp 第二章寄存器模型后, 发现 <em>edi,edx,esi</em> 三个都是保存参数的寄存器.</p>
<p>在 fun4 的流程中, <em>rdi</em> 的值没有被修改, 在 +0 到 + 17 中,  求出 ecx = (eax-esi) / 2 + esi , 观察到这个算式很像二分法, 函数的参数为 int sum(int n,int i,int j) </p>
<p>观察流程发现,只有在 <em>ecx</em> == <em>edi</em> 时返回0.</p>
<p>又因为第三个参数 <em>edx</em> == 0xe == 14, 第二个参数 <em>esi</em> == 0,</p>
<p>所以输入的第一个参数在 <em>0(%esi)</em>, <em>14(%edx)</em> 二分后得到的数中, 有{ 0, 1, 3 ,7 }.</p>
<p>答案共有四组:</p>
<p>[0,0], [1,0], [3,0], [7,0]</p>
<p><img src="./CS-APP-BombLab/register.png" alt=""></p>
<h2 id="phase-5"><a href="#phase-5" class="headerlink" title="phase 5"></a>phase 5</h2><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs assembly">0x401062 &lt;+0&gt;:     push   %rbx<br>0x401063 &lt;+1&gt;:     sub    $0x20,%rsp<br>0x401067 &lt;+5&gt;:     mov    %rdi,%rbx<br>0x40106a &lt;+8&gt;:     mov    %fs:0x28,%rax<br>0x401073 &lt;+17&gt;:    mov    %rax,0x18(%rsp)<br>0x401078 &lt;+22&gt;:    xor    %eax,%eax<br>0x40107a &lt;+24&gt;:    call   0x40131b &lt;string_length&gt;<br>0x40107f &lt;+29&gt;:    cmp    $0x6,%eax<br>0x401082 &lt;+32&gt;:    je     0x4010d2 &lt;phase_5+112&gt;<br>0x401084 &lt;+34&gt;:    call   0x40143a &lt;explode_bomb&gt;<br>0x401089 &lt;+39&gt;:    jmp    0x4010d2 &lt;phase_5+112&gt;<br>0x40108b &lt;+41&gt;:    movzbl (%rbx,%rax,1),%ecx<br>0x40108f &lt;+45&gt;:    mov    %cl,(%rsp)<br>0x401092 &lt;+48&gt;:    mov    (%rsp),%rdx<br>0x401096 &lt;+52&gt;:    and    $0xf,%edx<br>0x401099 &lt;+55&gt;:    movzbl 0x4024b0(%rdx),%edx<br>0x4010a0 &lt;+62&gt;:    mov    %dl,0x10(%rsp,%rax,1)<br>0x4010a4 &lt;+66&gt;:    add    $0x1,%rax<br>0x4010a8 &lt;+70&gt;:    cmp    $0x6,%rax<br>0x4010ac &lt;+74&gt;:    jne    0x40108b &lt;phase_5+41&gt;<br>0x4010ae &lt;+76&gt;:    movb   $0x0,0x16(%rsp)<br>0x4010b3 &lt;+81&gt;:    mov    $0x40245e,%esi<br>0x4010b8 &lt;+86&gt;:    lea    0x10(%rsp),%rdi<br>0x4010bd &lt;+91&gt;:    call   0x401338 &lt;strings_not_equal&gt;<br>0x4010c2 &lt;+96&gt;:    test   %eax,%eax<br>0x4010c4 &lt;+98&gt;:    je     0x4010d9 &lt;phase_5+119&gt;<br>0x4010c6 &lt;+100&gt;:   call   0x40143a &lt;explode_bomb&gt;<br>0x4010cb &lt;+105&gt;:   nopl   0x0(%rax,%rax,1)<br>0x4010d0 &lt;+110&gt;:   jmp    0x4010d9 &lt;phase_5+119&gt;<br>0x4010d2 &lt;+112&gt;:   mov    $0x0,%eax<br>0x4010d7 &lt;+117&gt;:   jmp    0x40108b &lt;phase_5+41&gt;<br>0x4010d9 &lt;+119&gt;:   mov    0x18(%rsp),%rax<br>0x4010de &lt;+124&gt;:   xor    %fs:0x28,%rax<br>0x4010e7 &lt;+133&gt;:   je     0x4010ee &lt;phase_5+140&gt;<br>0x4010e9 &lt;+135&gt;:   call   0x400b30 &lt;__stack_chk_fail@plt&gt;<br>0x4010ee &lt;+140&gt;:   add    $0x20,%rsp<br>0x4010f2 &lt;+144&gt;:   pop    %rbx<br>0x4010f3 &lt;+145&gt;:   ret<br></code></pre></div></td></tr></table></figure>

<p>根据 +24 - +32 行得, 我们需要输入一个字符串且长度为6.</p>
<p>+55 movzbl 可以得到一串字符串 maduiersnfotvbyl  (设为 array x, 长度为16).</p>
<p>+24 - +74 的循环将我们输入长度为6的字符串逐个对 0xf 做 and 运算, 利用 x[i] 替换原来的字母. 例如 (‘o’ % 0xf = 15) 那么’o’ 就替换为 ‘l’.</p>
<p>+81 地址得出字符串 “flyers”.</p>
<p>符合条件的字母很多,只要符合与 0xf 能得到对应下标的都是答案.</p>
<p>答案之一:</p>
<p>ionefg</p>
<h2 id="phase-6"><a href="#phase-6" class="headerlink" title="phase 6"></a>phase 6</h2><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs assembly">0x4010f4 &lt;+0&gt;:     push   %r14<br>0x4010f6 &lt;+2&gt;:     push   %r13<br>0x4010f8 &lt;+4&gt;:     push   %r12<br>0x4010fa &lt;+6&gt;:     push   %rbp<br>0x4010fb &lt;+7&gt;:     push   %rbx<br>0x4010fc &lt;+8&gt;:     sub    $0x50,%rsp<br>0x401100 &lt;+12&gt;:    mov    %rsp,%r13<br>0x401103 &lt;+15&gt;:    mov    %rsp,%rsi<br>0x401106 &lt;+18&gt;:    call   0x40145c &lt;read_six_numbers&gt;<br>0x40110b &lt;+23&gt;:    mov    %rsp,%r14<br>0x40110e &lt;+26&gt;:    mov    $0x0,%r12d<br>0x401114 &lt;+32&gt;:    mov    %r13,%rbp<br>0x401117 &lt;+35&gt;:    mov    0x0(%r13),%eax<br>0x40111b &lt;+39&gt;:    sub    $0x1,%eax<br>0x40111e &lt;+42&gt;:    cmp    $0x5,%eax<br>0x401121 &lt;+45&gt;:    jbe    0x401128 &lt;phase_6+52&gt;<br>0x401123 &lt;+47&gt;:    call   0x40143a &lt;explode_bomb&gt;<br>0x401128 &lt;+52&gt;:    add    $0x1,%r12d<br>0x40112c &lt;+56&gt;:    cmp    $0x6,%r12d<br>0x401130 &lt;+60&gt;:    je     0x401153 &lt;phase_6+95&gt;<br>0x401132 &lt;+62&gt;:    mov    %r12d,%ebx<br>0x401135 &lt;+65&gt;:    movslq %ebx,%rax<br>0x401138 &lt;+68&gt;:    mov    (%rsp,%rax,4),%eax<br>0x40113b &lt;+71&gt;:    cmp    %eax,0x0(%rbp)<br>0x40113e &lt;+74&gt;:    jne    0x401145 &lt;phase_6+81&gt;<br>0x401140 &lt;+76&gt;:    call   0x40143a &lt;explode_bomb&gt;<br>0x401145 &lt;+81&gt;:    add    $0x1,%ebx<br>0x401148 &lt;+84&gt;:    cmp    $0x5,%ebx<br>0x40114b &lt;+87&gt;:    jle    0x401135 &lt;phase_6+65&gt;<br>0x40114d &lt;+89&gt;:    add    $0x4,%r13<br>0x401151 &lt;+93&gt;:    jmp    0x401114 &lt;phase_6+32&gt;<br>0x401153 &lt;+95&gt;:    lea    0x18(%rsp),%rsi<br>0x401158 &lt;+100&gt;:   mov    %r14,%rax<br>0x40115b &lt;+103&gt;:   mov    $0x7,%ecx<br>0x401160 &lt;+108&gt;:   mov    %ecx,%edx<br>0x401162 &lt;+110&gt;:   sub    (%rax),%edx<br>0x401164 &lt;+112&gt;:   mov    %edx,(%rax)<br>0x401166 &lt;+114&gt;:   add    $0x4,%rax<br>0x40116a &lt;+118&gt;:   cmp    %rsi,%rax<br>0x40116d &lt;+121&gt;:   jne    0x401160 &lt;phase_6+108&gt;<br>0x40116f &lt;+123&gt;:   mov    $0x0,%esi<br>0x401174 &lt;+128&gt;:   jmp    0x401197 &lt;phase_6+163&gt;<br>0x401176 &lt;+130&gt;:   mov    0x8(%rdx),%rdx<br>0x40117a &lt;+134&gt;:   add    $0x1,%eax<br>0x40117d &lt;+137&gt;:   cmp    %ecx,%eax<br>0x40117f &lt;+139&gt;:   jne    0x401176 &lt;phase_6+130&gt;<br>0x401181 &lt;+141&gt;:   jmp    0x401188 &lt;phase_6+148&gt;<br>0x401183 &lt;+143&gt;:   mov    $0x6032d0,%edx<br>0x401188 &lt;+148&gt;:   mov    %rdx,0x20(%rsp,%rsi,2)<br>0x40118d &lt;+153&gt;:   add    $0x4,%rsi<br>0x401191 &lt;+157&gt;:   cmp    $0x18,%rsi<br>0x401195 &lt;+161&gt;:   je     0x4011ab &lt;phase_6+183&gt;<br>0x401197 &lt;+163&gt;:   mov    (%rsp,%rsi,1),%ecx<br>0x40119a &lt;+166&gt;:   cmp    $0x1,%ecx<br>0x40119d &lt;+169&gt;:   jle    0x401183 &lt;phase_6+143&gt;<br>0x40119f &lt;+171&gt;:   mov    $0x1,%eax<br>0x4011a4 &lt;+176&gt;:   mov    $0x6032d0,%edx<br>0x4011a9 &lt;+181&gt;:   jmp    0x401176 &lt;phase_6+130&gt;<br>0x4011ab &lt;+183&gt;:   mov    0x20(%rsp),%rbx<br>0x4011b0 &lt;+188&gt;:   lea    0x28(%rsp),%rax<br>0x4011b5 &lt;+193&gt;:   lea    0x50(%rsp),%rsi<br>0x4011ba &lt;+198&gt;:   mov    %rbx,%rcx<br>0x4011bd &lt;+201&gt;:   mov    (%rax),%rdx<br>0x4011c0 &lt;+204&gt;:   mov    %rdx,0x8(%rcx)<br>0x4011c4 &lt;+208&gt;:   add    $0x8,%rax<br>0x4011c8 &lt;+212&gt;:   cmp    %rsi,%rax<br>0x4011cb &lt;+215&gt;:   je     0x4011d2 &lt;phase_6+222&gt;<br>0x4011cd &lt;+217&gt;:   mov    %rdx,%rcx<br>0x4011d0 &lt;+220&gt;:   jmp    0x4011bd &lt;phase_6+201&gt;<br>0x4011d2 &lt;+222&gt;:   movq   $0x0,0x8(%rdx)<br>0x4011da &lt;+230&gt;:   mov    $0x5,%ebp<br>0x4011df &lt;+235&gt;:   mov    0x8(%rbx),%rax<br>0x4011e3 &lt;+239&gt;:   mov    (%rax),%eax<br>0x4011e5 &lt;+241&gt;:   cmp    %eax,(%rbx)<br>0x4011e7 &lt;+243&gt;:   jge    0x4011ee &lt;phase_6+250&gt;<br>0x4011e9 &lt;+245&gt;:   call   0x40143a &lt;explode_bomb&gt;<br>0x4011ee &lt;+250&gt;:   mov    0x8(%rbx),%rbx<br>0x4011f2 &lt;+254&gt;:   sub    $0x1,%ebp<br>0x4011f5 &lt;+257&gt;:   jne    0x4011df &lt;phase_6+235&gt;<br>0x4011f7 &lt;+259&gt;:   add    $0x50,%rsp<br>0x4011fb &lt;+263&gt;:   pop    %rbx<br>0x4011fc &lt;+264&gt;:   pop    %rbp<br>0x4011fd &lt;+265&gt;:   pop    %r12<br>0x4011ff &lt;+267&gt;:   pop    %r13<br>0x401201 &lt;+269&gt;:   pop    %r14<br>0x401203 &lt;+271&gt;:   ret<br></code></pre></div></td></tr></table></figure>

<p> 第六个 phase 难度比较大, 花费了我较多时间整理代码结构.</p>
<p>可以将 phase_6 分为几个部分</p>
<ul>
<li><p>(,+23)   通过 read_six_number 可得, phase_6 需要读取 6 个数字.</p>
</li>
<li><p>(+23 ,+45) 说明输入的6个数都不能大于6</p>
</li>
<li><p>(,+128) 之前的这些部分 主要是求 x = 7 - x</p>
</li>
<li><p>(+129,+181)  观察 + 176 mov 一个立即数, 通过 x/20wd 查看发现结构为一个 node</p>
<ul>
<li><p>node { </p>
<p>​    val;   // 值</p>
<p>​    sym; // 标号</p>
<p>​    *next; // 下一个节点位置</p>
<p>}</p>
</li>
</ul>
</li>
<li><p>(+ 182, …)  循环遍历链表, 是否为从大到小的顺序排列</p>
</li>
</ul>
<p><img src="./CS-APP-BombLab/a.png" alt=""></p>
<p>通过节点的大小排序为 3 4 5 6 1 2.</p>
<p>但是由于前面的 x = 7 - x.</p>
<p>最终答案为 4 3 2 1 6 5.</p>
<p>这个 phase 花了较多时间, 主要是函数结构复杂, 跳转多, 做完后发现了 <a href="https://hex-rays.com/ida-pro/" target="_blank" rel="noopener">ida</a> 反汇编工具, 可以比较清晰的分析代码结构.</p>
<h2 id="secret-phase"><a href="#secret-phase" class="headerlink" title="secret phase"></a>secret phase</h2><p>在做完前面6个phase后,发现还有 fun7 和 secret_phase 函数.</p>
<p>根据关键字搜索, 发现了在 phase_defused 函数中有调用 secret_phase</p>
<figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs assembly">0x4015c4 &lt;+0&gt;:     sub    $0x78,%rsp<br>0x4015c8 &lt;+4&gt;:     mov    %fs:0x28,%rax<br>0x4015d1 &lt;+13&gt;:    mov    %rax,0x68(%rsp)<br>0x4015d6 &lt;+18&gt;:    xor    %eax,%eax<br>0x4015d8 &lt;+20&gt;:    cmpl   $0x6,0x202181(%rip)        # 0x603760 &lt;num_input_strings&gt;<br>0x4015df &lt;+27&gt;:    jne    0x40163f &lt;phase_defused+123&gt;<br>0x4015e1 &lt;+29&gt;:    lea    0x10(%rsp),%r8<br>0x4015e6 &lt;+34&gt;:    lea    0xc(%rsp),%rcx<br>0x4015eb &lt;+39&gt;:    lea    0x8(%rsp),%rdx<br>0x4015f0 &lt;+44&gt;:    mov    $0x402619,%esi<br>0x4015f5 &lt;+49&gt;:    mov    $0x603870,%edi<br>0x4015fa &lt;+54&gt;:    call   0x400bf0 &lt;__isoc99_sscanf@plt&gt;<br>0x4015ff &lt;+59&gt;:    cmp    $0x3,%eax<br>0x401602 &lt;+62&gt;:    jne    0x401635 &lt;phase_defused+113&gt;<br>0x401604 &lt;+64&gt;:    mov    $0x402622,%esi<br>0x401609 &lt;+69&gt;:    lea    0x10(%rsp),%rdi<br>0x40160e &lt;+74&gt;:    call   0x401338 &lt;strings_not_equal&gt;<br>0x401613 &lt;+79&gt;:    test   %eax,%eax<br>0x401615 &lt;+81&gt;:    jne    0x401635 &lt;phase_defused+113&gt;<br>0x401617 &lt;+83&gt;:    mov    $0x4024f8,%edi<br>0x40161c &lt;+88&gt;:    call   0x400b10 &lt;puts@plt&gt;<br>0x401621 &lt;+93&gt;:    mov    $0x402520,%edi<br>0x401626 &lt;+98&gt;:    call   0x400b10 &lt;puts@plt&gt;<br>0x40162b &lt;+103&gt;:   mov    $0x0,%eax<br>0x401630 &lt;+108&gt;:   call   0x401242 &lt;secret_phase&gt;<br>0x401635 &lt;+113&gt;:   mov    $0x402558,%edi<br>0x40163a &lt;+118&gt;:   call   0x400b10 &lt;puts@plt&gt;<br>0x40163f &lt;+123&gt;:   mov    0x68(%rsp),%rax<br>0x401644 &lt;+128&gt;:   xor    %fs:0x28,%rax<br>0x40164d &lt;+137&gt;:   je     0x401654 &lt;phase_defused+144&gt;<br>0x40164f &lt;+139&gt;:   call   0x400b30 &lt;__stack_chk_fail@plt&gt;<br>0x401654 &lt;+144&gt;:   add    $0x78,%rsp<br>0x401658 &lt;+148&gt;:   ret<br></code></pre></div></td></tr></table></figure>

<ul>
<li><p>+20  num_input_strings <del>一开始误以为是字符串长度</del> 后面发现是需要完成所有前面的 phase 才能开启</p>
</li>
<li><p>+44  <em>x/s 0x402619</em> 可得为 sscanf 的格式化字符 “%d %d %s”</p>
</li>
<li><p>+49  <em>x/s 0x603870</em> 可得  “1 0 “ 字符串是我们在 phase_4 输入的内容</p>
</li>
<li><p>+59 用于判断我们的字符串参数个数, 即 sscanf 的返回值, 我们需要在此输入 3 个参数</p>
</li>
<li><p>+64 <em>x/s 0x602622</em>  可得 “DrEvil”, 由于下面是 strings_not_equal, 所以这就是我们要输入的字符串</p>
</li>
</ul>
<p>由以上5个条件判断可进入 secret_phase.</p>
<figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs assembly">0x401242 &lt;+0&gt;:     push   %rbx<br>0x401243 &lt;+1&gt;:     call   0x40149e &lt;read_line&gt;<br>0x401248 &lt;+6&gt;:     mov    $0xa,%edx<br>0x40124d &lt;+11&gt;:    mov    $0x0,%esi<br>0x401252 &lt;+16&gt;:    mov    %rax,%rdi<br>0x401255 &lt;+19&gt;:    call   0x400bd0 &lt;strtol@plt&gt;<br>0x40125a &lt;+24&gt;:    mov    %rax,%rbx<br>0x40125d &lt;+27&gt;:    lea    -0x1(%rax),%eax<br>0x401260 &lt;+30&gt;:    cmp    $0x3e8,%eax<br>0x401265 &lt;+35&gt;:    jbe    0x40126c &lt;secret_phase+42&gt;<br>0x401267 &lt;+37&gt;:    call   0x40143a &lt;explode_bomb&gt;<br>0x40126c &lt;+42&gt;:    mov    %ebx,%esi<br>0x40126e &lt;+44&gt;:    mov    $0x6030f0,%edi<br>0x401273 &lt;+49&gt;:    call   0x401204 &lt;fun7&gt;<br>0x401278 &lt;+54&gt;:    cmp    $0x2,%eax<br>0x40127b &lt;+57&gt;:    je     0x401282 &lt;secret_phase+64&gt;<br>0x40127d &lt;+59&gt;:    call   0x40143a &lt;explode_bomb&gt;<br>0x401282 &lt;+64&gt;:    mov    $0x402438,%edi<br>0x401287 &lt;+69&gt;:    call   0x400b10 &lt;puts@plt&gt;<br>0x40128c &lt;+74&gt;:    call   0x4015c4 &lt;phase_defused&gt;<br>0x401291 &lt;+79&gt;:    pop    %rbx<br>0x401292 &lt;+80&gt;:    ret    <br><br>fun7:<br>0x401204 &lt;+0&gt;:     sub    $0x8,%rsp<br>0x401208 &lt;+4&gt;:     test   %rdi,%rdi<br>0x40120b &lt;+7&gt;:     je     0x401238 &lt;fun7+52&gt;<br>0x40120d &lt;+9&gt;:     mov    (%rdi),%edx<br>0x40120f &lt;+11&gt;:    cmp    %esi,%edx<br>0x401211 &lt;+13&gt;:    jle    0x401220 &lt;fun7+28&gt;<br>0x401213 &lt;+15&gt;:    mov    0x8(%rdi),%rdi<br>0x401217 &lt;+19&gt;:    call   0x401204 &lt;fun7&gt;<br>0x40121c &lt;+24&gt;:    add    %eax,%eax<br>0x40121e &lt;+26&gt;:    jmp    0x40123d &lt;fun7+57&gt;<br>0x401220 &lt;+28&gt;:    mov    $0x0,%eax<br>0x401225 &lt;+33&gt;:    cmp    %esi,%edx<br>0x401227 &lt;+35&gt;:    je     0x40123d &lt;fun7+57&gt;<br>0x401229 &lt;+37&gt;:    mov    0x10(%rdi),%rdi<br>0x40122d &lt;+41&gt;:    call   0x401204 &lt;fun7&gt;<br>0x401232 &lt;+46&gt;:    lea    0x1(%rax,%rax,1),%eax<br>0x401236 &lt;+50&gt;:    jmp    0x40123d &lt;fun7+57&gt;<br>0x401238 &lt;+52&gt;:    mov    $0xffffffff,%eax<br>0x40123d &lt;+57&gt;:    add    $0x8,%rsp<br>0x401241 &lt;+61&gt;:    ret<br></code></pre></div></td></tr></table></figure>

<p><em>secret_phase:</em></p>
<p>(0, +30) 函数接受一个参数, 并且需要 x &lt;= 1001(0x3e8)</p>
<p>+49 调用 fun7, 如果返回值不为2, 炸弹爆炸</p>
<p>在 +44 行出现立即数, 使用 x/20wx 查看地址内容</p>
<p><img src="./CS-APP-BombLab/b.png" alt="b"></p>
<p>x/120wx 后, 发现内容很长, 且结构和上一个phase_6的链表有点类似, 并且有两个节点, 大致判断是树的节点</p>
<p><img src="./CS-APP-BombLab/c.png" alt="c"></p>
<p><em>fun7:</em></p>
<p>观察 fun7 ,由于知道拆除炸弹的条件是返回值为2.</p>
<p>根据代码结构, fun7 是一个递归结构,访问左边的节点为 val * 2,访问右边的节点为 val * 2+1. </p>
<p><em>$rdi</em> 为子结点的地址,如果 <em>$rdi</em> 为空则返回 0xfffffff.  所以可以确定访问顺序为先右再左然后返回, 因为是递归访问值的操作在返回时, 所以顺序相反</p>
<p>即 <em>$rdi</em> 的值应该为 0 -&gt; 2 * 0 + 1 -&gt; 1 * 2</p>
<p>打印出数值后可以观察到这棵树为满二叉树.</p>
<p>首先找寻叶子节点,发现 20 为其中之一答案, 有因为 node(20) 的父节点 val = 2 * val(node(20)) = 0, 20的父节点 22 也为答案</p>
<p>所以答案为:</p>
<p>20 22</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>bomb 这个 lab 还是很有意思的, 做 lab 的过程中, 从一个 gdb 小白, 变成了一个比较熟练的 gdb 使用者, 对汇编在机器上的运行有了更深刻的理解. 感觉做完了 bomb 才算把 csapp 相关的那一章大概看懂.</p>
<p>文章省略了许多中途调试的步骤, 在这次实验中还是花费了比较多的时间来调试完成这个lab, 但是做完每个 phase 后带来的成就感还是很爽的.</p>
]]></content>
      <tags>
        <tag>csapp</tag>
      </tags>
  </entry>
  <entry>
    <title>CS:APP: DataLab</title>
    <url>/2022/03/20/CS-APP-DataLab/</url>
    <content><![CDATA[<p>DataLab 是 CS:APP 的第一个 lab, 练习有关 二进制, 补码运算, 以及浮点数表示等内容.</p>
<a id="more"></a>

<h2 id="bitXor"><a href="#bitXor" class="headerlink" title="bitXor"></a><em>bitXor</em></h2><ul>
<li>异或逻辑运算转化，根据逻辑公式得到结果</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bitXor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">return</span> ~(x &amp; y) &amp; ~(~x &amp; ~y);<br>&#125;<br></code></pre></div></td></tr></table></figure>

<h2 id="tmin"><a href="#tmin" class="headerlink" title="tmin"></a><em>tmin</em></h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">tmin</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> i &lt;&lt; <span class="hljs-number">31</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<h2 id="isTmax"><a href="#isTmax" class="headerlink" title="isTmax"></a><em>isTmax</em></h2><ul>
<li>根据最大值的二进制形式，可得 最大值+1 与 最大值 相加取反会得到全0 ，然而 -1 也有这个性质 ，所以需要排除 -1，得到最终结果</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">isTmax</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">return</span> !((~(x + x + <span class="hljs-number">1</span>)) ^ !(x + <span class="hljs-number">1</span>));<br>&#125;<br></code></pre></div></td></tr></table></figure>

<h2 id="allOddBits"><a href="#allOddBits" class="headerlink" title="allOddBits"></a><em>allOddBits</em></h2><ul>
<li>因为题目的条件限制只能使用 0 ~ 0xff 范围的数字、最大操作符限制为12。只能自己构造 0xAAAAAAAA , 利用 0xAA 以及位移运算完成</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">allOddBits</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">int</span> x1 = <span class="hljs-number">0xAA</span> + (<span class="hljs-number">0xAA</span> &lt;&lt; <span class="hljs-number">8</span>);<br>  <span class="hljs-keyword">int</span> x2 = x1 + (x1 &lt;&lt; <span class="hljs-number">16</span>);<br>  <span class="hljs-keyword">return</span> !((x &amp; x2) ^ x2);<br>&#125;<br></code></pre></div></td></tr></table></figure>

<h2 id="negate"><a href="#negate" class="headerlink" title="negate"></a><em>negate</em></h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">negate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">return</span> ~x + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<h2 id="isAsciiDigit"><a href="#isAsciiDigit" class="headerlink" title="isAsciiDigit"></a><em>isAsciiDigit</em></h2><ul>
<li>根据 ascii 码的符号位，针对位做运算拆分成两部分，一部分对 0x30 运算，一部分对 0-9 的数字做判断得出结果 </li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">isAsciiDigit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">return</span> !((x &gt;&gt; <span class="hljs-number">4</span> ^ <span class="hljs-number">0x3</span>) | !(!(x &amp; <span class="hljs-number">0x8</span>) | (!(x &amp; <span class="hljs-number">0x4</span>) &amp; !(x &amp; <span class="hljs-number">0x2</span>))));<br>&#125;<br></code></pre></div></td></tr></table></figure>

<h2 id="conditional"><a href="#conditional" class="headerlink" title="conditional"></a><em>conditional</em></h2><ul>
<li>将选择y与z转换为求与运算，x!=0 则将后半部分的运算转换为全 0，x=0 则将前半部分转换为 0</li>
<li>先对x进行逻辑转换 转换为 0 或 1 ，其次转换为反码，0 的反码为 0，1 的反码 -1 为全 1，符合我们需要运算的结果</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">conditional</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> z)</span></span><br><span class="hljs-function"></span>&#123;<br>  x = !!x;<br>  x = ~x + <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> (x &amp; y) | (~x &amp; z);<br>&#125;<br></code></pre></div></td></tr></table></figure>

<h2 id="isLessOrEqual"><a href="#isLessOrEqual" class="headerlink" title="isLessOrEqual"></a><em>isLessOrEqual</em></h2><ul>
<li><p>先求出 x符号位 ^ y符号位的差异情况。如果相同为0，不同为1。</p>
</li>
<li><p>根据符号的相同与否</p>
<ul>
<li>如果符号不同，直接根据 x 的符号位情况得出结果</li>
<li>如果符号相同，求 x-y 或者 y-x 的正负情况<ul>
<li>求出 x + (-y) 其中 x = y 的话会有 0 的符号位问题<br>可以将问题转换为 y + (-x) 或这 x - y - 1 这样消除符号位的问题</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">isLessOrEqual</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;                                    <span class="hljs-comment">// y 补码</span><br>  <span class="hljs-keyword">int</span> judge2 = ((x + ~y) &gt;&gt; <span class="hljs-number">31</span>) &amp; <span class="hljs-number">1</span>; <span class="hljs-comment">// 求出 x - y 的正负 正0 负1</span><br>  <span class="hljs-keyword">int</span> xb = (x &gt;&gt; <span class="hljs-number">31</span>) &amp; <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">int</span> yb = (y &gt;&gt; <span class="hljs-number">31</span>) &amp; <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">int</span> judge = xb ^ yb;                       <span class="hljs-comment">// 求 x y 符号位差异 1不同 0相同</span><br>  <span class="hljs-keyword">return</span> (judge2 &amp; (!judge)) | (judge &amp; xb); <span class="hljs-comment">// 正负号不同时直接看 x，相同时则计算出结果</span><br>&#125;<br></code></pre></div></td></tr></table></figure>

<h2 id="logicalNeg"><a href="#logicalNeg" class="headerlink" title="logicalNeg"></a><em>logicalNeg</em></h2><ul>
<li>利用 0 和 0 的补码仍然为 0 ，利用右移运算 +1 排除 32 位最小值 -2,147,483,648，最终得到结果</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">logicalNeg</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">return</span> ((x | (~x + <span class="hljs-number">1</span>)) &gt;&gt; <span class="hljs-number">31</span>) + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<h2 id="howManyBits"><a href="#howManyBits" class="headerlink" title="howManyBits"></a><em>howManyBits</em></h2><ul>
<li>二分法的思想</li>
<li>首先获取符号位，根据符号位的正负来确定最高位的位置<ul>
<li>如果最高位为0，则保持原数不变</li>
<li>如果最高位为1，则按位取反方便后续计算</li>
</ul>
</li>
<li>判断前16位部分是否存在1，根据逻辑判断取得位移位数，以此类推最终返回结果</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">howManyBits</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">int</span> b16, b8, b4, b2, b1, b0;<br>  <span class="hljs-keyword">int</span> sign = x &gt;&gt; <span class="hljs-number">31</span>;<br>  x = (sign &amp; ~x) | (~sign &amp; x);<br><br>  b16 = !!(x &gt;&gt; <span class="hljs-number">16</span>) &lt;&lt; <span class="hljs-number">4</span>;<br>  x = x &gt;&gt; b16;<br>  b8 = !!(x &gt;&gt; <span class="hljs-number">8</span>) &lt;&lt; <span class="hljs-number">3</span>;<br>  x = x &gt;&gt; b8;<br>  b4 = !!(x &gt;&gt; <span class="hljs-number">4</span>) &lt;&lt; <span class="hljs-number">2</span>;<br>  x = x &gt;&gt; b4;<br>  b2 = !!(x &gt;&gt; <span class="hljs-number">2</span>) &lt;&lt; <span class="hljs-number">1</span>;<br>  x = x &gt;&gt; b2;<br>  b1 = !!(x &gt;&gt; <span class="hljs-number">1</span>);<br>  x = x &gt;&gt; b1;<br>  b0 = x;<br>  <span class="hljs-keyword">return</span> b16 + b8 + b4 + b2 + b1 + b0 + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<h2 id="floatScale2"><a href="#floatScale2" class="headerlink" title="floatScale2"></a><em>floatScale2</em></h2><ul>
<li>根据 exp 位来进行判断</li>
<li>exp ==0 以及 exp == 255 都需要额外判断<ul>
<li>exp == 0 时，有可能为0，也有可能时非规约数，使用位移运算并添加符号</li>
<li>exp == 255 时，NaN 返回参数</li>
<li>0 &lt; exp &lt; 255 时，exp+1 后判断是否等于 255，如果等于 255 返回 相应符号的无穷</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-title">floatScale2</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> uf)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">int</span> <span class="hljs-built_in">exp</span> = (uf &amp; <span class="hljs-number">0x7F800000</span>) &gt;&gt; <span class="hljs-number">23</span>;<br>  <span class="hljs-keyword">int</span> sign = uf &amp; (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">31</span>);<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">exp</span> == <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> uf &lt;&lt; <span class="hljs-number">1</span> | sign;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">exp</span> == <span class="hljs-number">255</span>)<br>    <span class="hljs-keyword">return</span> uf;<br>  <span class="hljs-built_in">exp</span>++;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">exp</span> == <span class="hljs-number">255</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0x7f800000</span> | sign;<br>  <span class="hljs-keyword">return</span> (<span class="hljs-built_in">exp</span> &lt;&lt; <span class="hljs-number">23</span>) | (uf &amp; <span class="hljs-number">0x807fffff</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure>

<h2 id="floatFloat2Int"><a href="#floatFloat2Int" class="headerlink" title="floatFloat2Int"></a><em>floatFloat2Int</em></h2><ul>
<li>exp &lt; 0 时，转换为 int 始终小于 0</li>
<li>exp &gt; 31 时，超出了 int 能表示的最大范围</li>
<li>frac 部分总共有 23 位，代表了精度的上线，所以根据 23 做判断<ul>
<li>如果 exp &gt; 23，向左移动 exp-23 位</li>
<li>如果 exp &lt; 23，向右移动 23-exp 位</li>
</ul>
</li>
<li>最后再根据原数位进行转换后正负的确定</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-title">floatScale2</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> uf)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">int</span> <span class="hljs-built_in">exp</span> = (uf &amp; <span class="hljs-number">0x7F800000</span>) &gt;&gt; <span class="hljs-number">23</span>;<br>  <span class="hljs-keyword">int</span> sign = uf &amp; (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">31</span>);<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">exp</span> == <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> uf &lt;&lt; <span class="hljs-number">1</span> | sign;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">exp</span> == <span class="hljs-number">255</span>)<br>    <span class="hljs-keyword">return</span> uf;<br>  <span class="hljs-built_in">exp</span>++;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">exp</span> == <span class="hljs-number">255</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0x7f800000</span> | sign;<br>  <span class="hljs-keyword">return</span> (<span class="hljs-built_in">exp</span> &lt;&lt; <span class="hljs-number">23</span>) | (uf &amp; <span class="hljs-number">0x807fffff</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure>

<h2 id="floatPower2"><a href="#floatPower2" class="headerlink" title="floatPower2"></a><em>floatPower2</em></h2><ul>
<li><p>根据 2.0 的浮点数写法可得 2.0 = (-1)^s * 2^(exp-127)* 1.frac, exp = 128, frac=0,s = 0 </p>
</li>
<li><p>求 2^x 的浮点数即看 x+127 后 exp 位的结果</p>
</li>
<li><p>根据浮点数的特性分为三种情况</p>
<ul>
<li><p>非规范 exp 范围在 -149~-127 之间</p>
</li>
<li><p>规范 exp 范围在 -127~126 之间</p>
</li>
<li><p>exp 大于 127</p>
</li>
<li><p>正常范围内 x+127后 放到 exp 位上</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-title">floatPower2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">if</span> (x &lt; -(<span class="hljs-number">127</span> + <span class="hljs-number">23</span>))<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">-127</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> &lt;&lt; (<span class="hljs-number">149</span> + x);<br>  <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">127</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0xff</span> &lt;&lt; <span class="hljs-number">23</span>;<br>  <span class="hljs-keyword">return</span> (x + <span class="hljs-number">127</span>) &lt;&lt; <span class="hljs-number">23</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>
]]></content>
      <tags>
        <tag>csapp</tag>
      </tags>
  </entry>
  <entry>
    <title>编程中的范畴论</title>
    <url>/2021/03/08/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E4%B8%AD%E7%9A%84%E8%8C%83%E7%95%B4%E8%AE%BA/</url>
    <content><![CDATA[<p>待续 &nbsp;</p>
<a id="more"></a>

<p>参考</p>
<blockquote>
<p><a href="https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/" target="_blank" rel="noopener">Category theory for Programmers</a></p>
<p><a href="https://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html" target="_blank" rel="noopener">Functors,Applicatives,And Monads In Pictures</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>category theory</tag>
        <tag>function programming</tag>
        <tag>haskell</tag>
      </tags>
  </entry>
  <entry>
    <title>Arch切换lts内核过程</title>
    <url>/2020/10/10/arch%E5%88%87%E6%8D%A2lts%E5%86%85%E6%A0%B8/</url>
    <content><![CDATA[<h3 id="前言-nbsp"><a href="#前言-nbsp" class="headerlink" title="前言   &nbsp;"></a>前言   &nbsp;</h3><p>由于更新导致的滚挂之后，想配置一个更加稳定的系统。萌生了切换内核的想法。</p>
<a id="more"></a>

<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo pacman -S linux-lts linux-lts-headers<br>sudo grub-mkconfig -o /boot/grub/grub.cfg<br></code></pre></div></td></tr></table></figure>

<p>执行之后重启之后以lts内核进入系统</p>
<p>使用lts内核相比普通内核提高了arch的稳定性，降低了滚挂的概率。</p>
]]></content>
      <tags>
        <tag>Archlinux</tag>
      </tags>
  </entry>
  <entry>
    <title>LiveCD修复记录</title>
    <url>/2020/10/06/LiveCD%E4%BF%AE%E5%A4%8D%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>某次更新后重启发现系统内核未加载</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">error: invalid cluster 0<br>error: please load the kernel first<br></code></pre></div></td></tr></table></figure>


<p>于是使用LiveCD修复</p>
<a id="more"></a>

<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h4 id="准备过程"><a href="#准备过程" class="headerlink" title="准备过程"></a>准备过程</h4><ul>
<li>进入arch liveCD</li>
<li>联网</li>
<li>挂载原系统文件mount /dev/nvme0n1p1(/dev/sda) 到 /mnt</li>
<li>挂载efi文件到(/mnt/boot/efi</li>
</ul>
<h4 id="chroot修复"><a href="#chroot修复" class="headerlink" title="chroot修复"></a>chroot修复</h4><p>挂载进入chroot</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">arch-chroot /mnt<br>sudo pacman -Syyuu linux<br></code></pre></div></td></tr></table></figure>
<h4 id="重新生成grub文件"><a href="#重新生成grub文件" class="headerlink" title="重新生成grub文件"></a>重新生成grub文件</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">grub-mkconfig -o /boot/grub/grub.cfg<br>grub-install --recheck /dev/sda(efi文件所在)<br></code></pre></div></td></tr></table></figure>

<p>如果是UEFI引导，这一步如果前面未挂载efi文件则会失败</p>
<h4 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h4><p>exit退出arch-chroot重启即可正常进入系统</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次修复还是踩了不少坑的，在重装了几次内核后又发现报错信息变成了</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">error:invalid magic number<br>error:please load kernel first<br></code></pre></div></td></tr></table></figure>

<p>之后又查阅了不少信息，通过重新生成grub文件的方式解决</p>
]]></content>
      <tags>
        <tag>archlinux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux swap</title>
    <url>/2020/06/15/swapfile/</url>
    <content><![CDATA[<p>在arch的使用过程中发现swap交换分区挂载失败，查询后发现可以通过交换文件进行挂载起到交换空间的效果。 &nbsp; &nbsp;</p>
<h3 id="检查交换空间状态"><a href="#检查交换空间状态" class="headerlink" title="检查交换空间状态"></a>检查交换空间状态</h3><p>$ swapon -s</p>
<p>或 $ free -m</p>
<h3 id="使用交换文件的方式"><a href="#使用交换文件的方式" class="headerlink" title="使用交换文件的方式"></a>使用交换文件的方式</h3><ul>
<li>相比磁盘分区，交换文件更方便于随时调整大小或删除。</li>
</ul>
<a id="more"></a>

<h4 id="手动方式"><a href="#手动方式" class="headerlink" title="手动方式"></a>手动方式</h4><p>用root权限，使用fallocate方式创建swapfile，创建512m的文件大小如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">fallocate -l 512M /swapfile<br></code></pre></div></td></tr></table></figure>

<p>但在实际操作工程中，使用<strong>fallocate</strong>命令使我在后面的启动时遇到错误，</p>
<p>解决方法： <em>fallocate</em> 命令用在 <a href="https://wiki.archlinux.org/index.php/F2FS" target="_blank" rel="noopener">F2FS</a> 或 <a href="https://wiki.archlinux.org/index.php/XFS" target="_blank" rel="noopener">XFS</a> 文件系统时可能会引起问题。<a href="https://bugzilla.redhat.com/show_bug.cgi?id=1129205#c3" target="_blank" rel="noopener">[1]</a> 代替方式是使用 <em>dd</em> 命令，但是要慢一点:</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">dd <span class="hljs-keyword">if</span>=/dev/zero of=/swapfile bs=1M count=512<br></code></pre></div></td></tr></table></figure>

<p>为交换文件设置权限：（交换文件全局可读是一个巨大的本地漏洞）</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">chmod 600 /swapfile<br></code></pre></div></td></tr></table></figure>

<p>创建后格式化</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">mkswap /swapfile<br></code></pre></div></td></tr></table></figure>

<p>启用文件</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">swapon /swapfile<br></code></pre></div></td></tr></table></figure>

<p>最后，编辑 <code>/etc/fstab</code>， 在其中添加如下的一行：</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">/swapfile none swap defaults 0 0<br></code></pre></div></td></tr></table></figure>

<h3 id="如果要修改或删除交换文件"><a href="#如果要修改或删除交换文件" class="headerlink" title="如果要修改或删除交换文件"></a>如果要修改或删除交换文件</h3><h4 id="先停用他"><a href="#先停用他" class="headerlink" title="先停用他"></a>先停用他</h4><p>在root权限下：</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">swapoff -a<br></code></pre></div></td></tr></table></figure>

<p>删除：</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">rm -rf /swapfile<br></code></pre></div></td></tr></table></figure>

<p>最后删除/etc/fstab中相关项</p>
]]></content>
      <tags>
        <tag>archlinux</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>go-micro(1)</title>
    <url>/2020/06/06/go-micro(1)/</url>
    <content><![CDATA[<h1 id="Go-Micro-nbsp-nbsp-nbsp-nbsp-nbsp"><a href="#Go-Micro-nbsp-nbsp-nbsp-nbsp-nbsp" class="headerlink" title="Go-Micro &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;"></a>Go-Micro &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>可插拔<ul>
<li>可以直接go-micro的默认实现或者在<a href="https://github.com/micro/go-plugins" target="_blank" rel="noopener">go-plugins</a>中选择基于不同组件实现的插件库,甚至可以基于go-micro框架抽象的接口来实现自己的插件库</li>
</ul>
</li>
<li>更容易扩展</li>
<li>专注一个业务功能</li>
<li>耦合松散，维护简单</li>
</ul>
<a id="more"></a>

<h2 id="Go-Micro系统架构"><a href="#Go-Micro系统架构" class="headerlink" title="Go-Micro系统架构"></a>Go-Micro系统架构</h2><p><img src="./pic1.png" alt=""></p>
<p><img src="./pic2.jpeg" alt=""></p>
<h3 id="Registry"><a href="#Registry" class="headerlink" title="Registry"></a>Registry</h3><p>注册表提供可插入的服务发现库，来查找正在运行的服务。当前的实现是consul，etcd，内存和kubernetes。如果您的喜欢不一样，该界面很容易实现。</p>
<h3 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h3><p>选择器通过选择提供负载均衡机制。当客户端向服务器发出请求时，它将首先查询服务的注册表。这通常会返回一个表示服务的正在运行的节点列表。选择器将选择这些节点中的一个用于查询。多次调用选择器将允许使用平衡算法。目前的方法是循环法，随机哈希和黑名单。</p>
<h3 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h3><p>Broker是发布和订阅的可插入接口。微服务是一个事件驱动的架构，发布和订阅事件应该是一流的公民。目前的实现包括nats，rabbitmq和http（用于开发）。</p>
<h3 id="Transport"><a href="#Transport" class="headerlink" title="Transport"></a>Transport</h3><p>传输是通过点对点传输消息的可插拔接口。目前的实现是http，rabbitmq和nats。通过提供这种抽象，运输可以无缝地换出。</p>
<h3 id="Codec"><a href="#Codec" class="headerlink" title="Codec"></a>Codec</h3><p>编码</p>
<h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><p>客户端提供了一种制作RPC查询的方法。它结合了注册表，选择器，代理和传输。它还提供重试，超时，使用上下文等。</p>
<h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><p>服务器是构建正在运行的微服务的接口。它提供了一种提供RPC请求的方法。</p>
<h3 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h3><p>提供go-micro的<a href="https://github.com/micro/go-plugins" target="_blank" rel="noopener">go-plugins</a>插件。</p>
<p><a href="https://github.com/micro/go-plugins" target="_blank" rel="noopener">https://github.com/micro/go-plugins</a></p>
<h4 id="api"><a href="#api" class="headerlink" title="api"></a>api</h4><p>micro api 构建在 go-micro 上，利用它进行服务发现，负载平衡，编码和基于 RPC 的通信。对 API 的请求通过 HTTP 提供，并通过 RPC 进行内部路由.</p>
<p>由于 micro api 在内部使用 go-micro, 因此它也支持插件，因此可以随时切换为 kubernetes api 的 consul 服务发现或 gRPC.</p>
<p><img src="./pic3.png" alt=""></p>
<h4 id="web"><a href="#web" class="headerlink" title="web"></a>web</h4><p>Micro Web提供了一个用于查看和查询服务的仪表板.</p>
<p><img src="./pic4.png" alt=""></p>
<h1 id="grpc-NewService和micro-NewService"><a href="#grpc-NewService和micro-NewService" class="headerlink" title="grpc.NewService和micro.NewService()"></a>grpc.NewService和micro.NewService()</h1><p>在<code>go-micro</code>中主要提供了两种创建<code>micro.Service</code>的方式：</p>
<ol>
<li><h2 id="gprc-NewService"><a href="#gprc-NewService" class="headerlink" title="gprc.NewService()"></a><code>gprc.NewService()</code></h2></li>
<li><h2 id="micro-NewService"><a href="#micro-NewService" class="headerlink" title="micro.NewService()"></a><code>micro.NewService()</code></h2></li>
</ol>
<p>第一种方式下底层传输协议使用的是<code>grpc</code>；第二种方式下底层传输协议使用的是<code>http + protobuf</code>。从实际比较来看，<code>gprc</code>的性能明显好于<code>micro</code>。</p>
<h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>go-micro的版本已经更新到了3.0,架构也与撰写文本时有了较大变化.<br>本文内容只包含了micro v2部分的内容.</p>
]]></content>
      <tags>
        <tag>golang</tag>
        <tag>go-micro</tag>
      </tags>
  </entry>
  <entry>
    <title>Go interface</title>
    <url>/2020/03/19/interface/</url>
    <content><![CDATA[<h2 id="接口-nbsp-nbsp-nbsp"><a href="#接口-nbsp-nbsp-nbsp" class="headerlink" title="接口    &nbsp; &nbsp; &nbsp;"></a>接口    &nbsp; &nbsp; &nbsp;</h2><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p><strong>interface 是一种类型</strong>，从它的定义可以看出来用了 type 关键字，准确的说 interface 是一种<strong>具有一组方法的类型</strong>。</p>
<p><strong>如果一个类型实现了一个 interface 中所有方法，我们说类型实现了该 interface</strong>。go 没有显式的关键字用来实现 interface，只需要实现 interface 包含的方法即可。</p>
<a id="more"></a>

<h4 id="empty-interface"><a href="#empty-interface" class="headerlink" title="empty interface"></a>empty interface</h4><p>所有类型都实现了empty interface，因为任何一种类型至少实现了 0 个方法。空的 interface 没有方法，所以可以认为所有的类型都实现了 <code>interface{}</code>。如果定义一个函数参数是 <code>interface{}</code> 类型，这个函数应该可以接受任何类型作为它的参数。</p>
<h4 id="duck-typing"><a href="#duck-typing" class="headerlink" title="duck typing"></a><a href="https://zh.wikipedia.org/wiki/Duck_typing" target="_blank" rel="noopener">duck typing</a></h4><blockquote>
<p>​    *”When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck.”*</p>
</blockquote>
<p>一个对象有效的语义，不是由继承自特定的类或实现特定的接口，而是由”当前方法和属性的集合”决定 。</p>
<p>Go语言通过隐式接口机制实现了鸭子面向对象模型。</p>
<figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span><br><br><span class="hljs-keyword">type</span> Duck <span class="hljs-keyword">interface</span>&#123;<br>	Swim()<br>	Walk()<br>	Quacks()<br>&#125;<br><span class="hljs-keyword">type</span> Bird <span class="hljs-keyword">struct</span> &#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(b *Bird)</span> <span class="hljs-title">Swim</span><span class="hljs-params">()</span></span> &#123;<br>	fmt.Println(<span class="hljs-string">"swim"</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(b *Bird)</span> <span class="hljs-title">Walk</span><span class="hljs-params">()</span></span> &#123;<br>	fmt.Println(<span class="hljs-string">"walk"</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(b *Bird)</span> <span class="hljs-title">Quacks</span><span class="hljs-params">()</span></span> &#123;<br>	fmt.Println(<span class="hljs-string">"quacks"</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>	<span class="hljs-keyword">var</span> duck Duck<br>	b := &amp;Bird&#123;&#125;<br>	d = b<br>	duck.Swim()		<br>	duck.Walk()		<br>	duck.Quacks()	<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>运行后结果为</p>
<figure class="highlight armasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs armasm"><span class="hljs-keyword">swim</span><br><span class="hljs-keyword">walk</span><br><span class="hljs-keyword">quacks</span><br></code></pre></div></td></tr></table></figure>

<h4 id="通过接口实现多态"><a href="#通过接口实现多态" class="headerlink" title="通过接口实现多态"></a>通过接口实现多态</h4><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span><br><br><span class="hljs-keyword">type</span> Programmer <span class="hljs-keyword">interface</span>&#123;<br>	Use()<br>	Learn()<br>&#125;<br><span class="hljs-keyword">type</span> Gopher <span class="hljs-keyword">struct</span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(g *Gopher)</span> <span class="hljs-title">Use</span><span class="hljs-params">()</span></span>&#123;<br>	fmt.Println(<span class="hljs-string">"gopher use go"</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(g *Gopher)</span> <span class="hljs-title">Learn</span><span class="hljs-params">()</span></span>&#123;<br>	fmt.Println(<span class="hljs-string">"gopher learn go"</span>)<br>&#125;<br><br><span class="hljs-keyword">type</span> Pythonista <span class="hljs-keyword">struct</span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *Pythonista)</span> <span class="hljs-title">Use</span><span class="hljs-params">()</span></span>&#123;<br>	fmt.Println(<span class="hljs-string">"pythonista use python"</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *Pythonista)</span> <span class="hljs-title">Learn</span><span class="hljs-params">()</span></span>&#123;<br>	fmt.Println(<span class="hljs-string">"pythonista learn python"</span>)<br>&#125;<br><span class="hljs-keyword">type</span> Human <span class="hljs-keyword">struct</span> &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *Human)</span><span class="hljs-title">Program</span><span class="hljs-params">(p Programmer)</span></span>&#123;<br>	p.Use()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Factory</span><span class="hljs-params">(name <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">Programmer</span></span>&#123;<br>	<span class="hljs-keyword">switch</span> name &#123;<br>	<span class="hljs-keyword">case</span> <span class="hljs-string">"gopher"</span>:<br>		<span class="hljs-keyword">return</span> &amp;Gopher&#123;&#125;<br>	<span class="hljs-keyword">case</span> <span class="hljs-string">"pythonista"</span>:<br>		<span class="hljs-keyword">return</span> &amp;Pythonista&#123;&#125;<br>	<span class="hljs-keyword">default</span>:<br>		<span class="hljs-built_in">panic</span>(<span class="hljs-string">"err"</span>)<br>	&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>	human := &amp;Human&#123;&#125;<br>	p1  := Factory(<span class="hljs-string">"gopher"</span>)<br>	p1.Learn()<br>	human.Program(p1)<br><br>	p2  := Factory(<span class="hljs-string">"pythonista"</span>)<br>	p2.Learn()<br>	human.Program(p2)<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>gopher和pythonista两个对象并没有显式声明实现了接口programmer。实际上在编译器调用Program函数时，将gopher和pythonista对象转换成了Programmer类型。</p>
<p>Go 作为一种静态语言，通过接口实现了鸭子类型，实际上是 Go 的编译器在其中作了隐匿的转换工作。</p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><h4 id="eface"><a href="#eface" class="headerlink" title="eface"></a>eface</h4><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> eface <span class="hljs-keyword">struct</span> &#123;<br>	_type *_type   <span class="hljs-comment">//_type是对一种具体类型的描述,例如int,string</span><br>	data  unsafe.Pointer   <span class="hljs-comment">//指向真实数据的指针</span><br>&#125;<br><br><span class="hljs-comment">// Needs to be in sync with ../cmd/link/internal/ld/decodesym.go:/^func.commonsize,</span><br><span class="hljs-comment">// ../cmd/compile/internal/gc/reflect.go:/^func.dcommontype and</span><br><span class="hljs-comment">// ../reflect/type.go:/^type.rtype.</span><br><span class="hljs-keyword">type</span> _type <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-comment">//类型大小</span><br>	size       <span class="hljs-keyword">uintptr</span> <span class="hljs-comment">//type size</span><br>	ptrdata    <span class="hljs-keyword">uintptr</span> <span class="hljs-comment">// size of memory prefix holding all pointers</span><br>    <span class="hljs-comment">//hash值</span><br>	hash       <span class="hljs-keyword">uint32</span>  <span class="hljs-comment">//hash of type;avoids computation in hash table</span><br>	tflag      tflag	<span class="hljs-comment">//// 类型的 flag，和反射相关</span><br>    <span class="hljs-comment">//内存对齐相关</span><br>	align      <span class="hljs-keyword">uint8</span><br>	fieldalign <span class="hljs-keyword">uint8</span><br>    kind       <span class="hljs-keyword">uint8</span> <span class="hljs-comment">// type mask bool,slice,struct...</span><br>	alg        *typeAlg<br>    <span class="hljs-comment">//垃圾回收相关</span><br>	<span class="hljs-comment">// gcdata stores the GC type data for the garbage collector.</span><br>	<span class="hljs-comment">// If the KindGCProg bit is set in kind, gcdata is a GC program.</span><br>	<span class="hljs-comment">// Otherwise it is a ptrmask bitmap. See mbitmap.go for details.</span><br>	gcdata    *<span class="hljs-keyword">byte</span><br>	str       nameOff <span class="hljs-comment">//string form</span><br>	ptrToThis typeOff <span class="hljs-comment">// type for pointer to this type, may be zero</span><br>&#125;<br></code></pre></div></td></tr></table></figure>

<h4 id="iface"><a href="#iface" class="headerlink" title="iface"></a>iface</h4><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> iface <span class="hljs-keyword">struct</span> &#123;<br>	tab  *itab   <span class="hljs-comment">//itab,类型信息</span><br>	data unsafe.Pointer<br>&#125;<br><br><span class="hljs-comment">// layout of Itab known to compilers</span><br><span class="hljs-comment">// allocated in non-garbage-collected memory</span><br><span class="hljs-comment">// Needs to be in sync with</span><br><span class="hljs-comment">// ../cmd/compile/internal/gc/reflect.go:/^func.dumptypestructs.</span><br><span class="hljs-keyword">type</span> itab <span class="hljs-keyword">struct</span> &#123;<br>	inter  *interfacetype <span class="hljs-comment">//interface type description   package path method</span><br>	_type  *_type         <span class="hljs-comment">//origin type</span><br>	link   *itab  <span class="hljs-comment">//hash表头指针</span><br>	hash   <span class="hljs-keyword">uint32</span> <span class="hljs-comment">// copy of _type.hash. Used for type switches.</span><br>	bad    <span class="hljs-keyword">bool</span>   <span class="hljs-comment">// type does not implement interface</span><br>	inhash <span class="hljs-keyword">bool</span>   <span class="hljs-comment">// has this itab been added to hash?</span><br>	unused [<span class="hljs-number">2</span>]<span class="hljs-keyword">byte</span><br>	fun    [<span class="hljs-number">1</span>]<span class="hljs-keyword">uintptr</span> <span class="hljs-comment">//method具体实现</span><br>&#125;<br><span class="hljs-comment">//包装了 _type 类型，_type 实际上是描述 Go 语言中各种数据类型的结构体。我们注意到，这里还包含一个 mhdr 字段，表示接口所定义的函数列表， pkgpath 记录定义了接口的包名</span><br><span class="hljs-keyword">type</span> interfacetype <span class="hljs-keyword">struct</span> &#123;<br>	typ     _type		<br>	pkgpath name<br>	mhdr    []imethod<br>&#125;<br><br><span class="hljs-keyword">type</span> imethod <span class="hljs-keyword">struct</span> &#123;<br>	name nameOff<br>	ityp typeOff<br>&#125;<br></code></pre></div></td></tr></table></figure>

<h4 id="接口的动态类型和动态值"><a href="#接口的动态类型和动态值" class="headerlink" title="接口的动态类型和动态值"></a>接口的动态类型和动态值</h4><p>例子</p>
<figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span><br><br><span class="hljs-keyword">type</span> Coder <span class="hljs-keyword">interface</span> &#123;<br>    code()<br>&#125;<br><br><span class="hljs-keyword">type</span> Gopher <span class="hljs-keyword">struct</span> &#123;<br>    name <span class="hljs-keyword">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(g Gopher)</span> <span class="hljs-title">code</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Printf(<span class="hljs-string">"%s is coding\n"</span>, g.name)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> c Coder<br>    fmt.Println(c == <span class="hljs-literal">nil</span>)<br>    fmt.Printf(<span class="hljs-string">"c: %T, %v\n"</span>, c, c)<br><br>    <span class="hljs-keyword">var</span> g *Gopher<br>    fmt.Println(g == <span class="hljs-literal">nil</span>)<br><br>    c = g<br>    fmt.Println(c == <span class="hljs-literal">nil</span>)<br>    fmt.Printf(<span class="hljs-string">"c: %T, %v\n"</span>, c, c)<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>输出</p>
<figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-literal">true</span><br>c: &lt;<span class="hljs-literal">nil</span>&gt;, &lt;<span class="hljs-literal">nil</span>&gt;<br><span class="hljs-literal">true</span><br><span class="hljs-literal">false</span><br>c: *main.Gopher, &lt;<span class="hljs-literal">nil</span>&gt;<br></code></pre></div></td></tr></table></figure>

<p>在一开始动态类型和值都为nil，赋值后类型为*main.Gopher</p>
<h4 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h4><p>nil 接口值既不保存值也不保存具体类型</p>
<p>只有当值和类型都为nil时，接口为空接口</p>
<p>例子</p>
<figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>	<span class="hljs-string">"fmt"</span><br>	<span class="hljs-string">"reflect"</span><br>)<br><br><span class="hljs-keyword">type</span> TestnilStruct <span class="hljs-keyword">struct</span>&#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">testnil1</span><span class="hljs-params">(a, b <span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-title">bool</span></span> &#123;<br>	<span class="hljs-keyword">return</span> a == b<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">testnil2</span><span class="hljs-params">(a *TestnilStruct, b <span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-title">bool</span></span> &#123;<br>	<span class="hljs-keyword">return</span> a == b<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">testnil3</span><span class="hljs-params">(a <span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-title">bool</span></span> &#123;<br>	<span class="hljs-keyword">return</span> a == <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">testnil4</span><span class="hljs-params">(a *TestnilStruct)</span> <span class="hljs-title">bool</span></span> &#123;<br>	<span class="hljs-keyword">return</span> a == <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">testnil5</span><span class="hljs-params">(a <span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-title">bool</span></span> &#123;<br>	v := reflect.ValueOf(a)<br>	<span class="hljs-keyword">return</span> v.IsNil() || !v.IsValid()		<span class="hljs-comment">//判断返回值是否为nil，返回值是否有效</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>	<span class="hljs-keyword">var</span> a *TestnilStruct<br>	fmt.Println(testnil1(a, <span class="hljs-literal">nil</span>))<br>	fmt.Println(testnil2(a, <span class="hljs-literal">nil</span>))	<br>	fmt.Println(testnil3(a))		<br>	fmt.Println(testnil4(a))		<br>	fmt.Println(testnil5(a))		<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>结果</p>
<figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-literal">false</span><br><span class="hljs-literal">false</span><br><span class="hljs-literal">false</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure>

<p>一个interface{}类型的变量包含了2个指针，一个指针指向值的类型，另外一个指针指向实际的值 对一个interface{}类型的nil变量来说，它的两个指针都是空。a传入后，指向的类型的指针不为空了，有类型的存在， 所以结果为false。 interface类型比较，两个指针都相等，才能相等。</p>
<h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><h4 id="类型转换和类型断言的区别"><a href="#类型转换和类型断言的区别" class="headerlink" title="类型转换和类型断言的区别"></a>类型转换和类型断言的区别</h4><p>类型转换前和后两者类型需要兼容</p>
<figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>	<span class="hljs-keyword">var</span> i <span class="hljs-keyword">int</span> = <span class="hljs-number">9</span><br><br>	<span class="hljs-keyword">var</span> f <span class="hljs-keyword">float64</span><br>	f = <span class="hljs-keyword">float64</span>(i)<br>	fmt.Printf(<span class="hljs-string">"%T, %v\n"</span>, f, f)<br><br>	f = <span class="hljs-number">10.8</span><br>	a := <span class="hljs-keyword">int</span>(f)<br>	fmt.Printf(<span class="hljs-string">"%T, %v\n"</span>, a, a)<br><br>	s := []<span class="hljs-keyword">int</span>(i)<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>int和float64之间的转换成功，但是在int转化为[]int时会报错</p>
<figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">Cannot convert expression of<span class="hljs-built_in"> type </span><span class="hljs-string">'int'</span> <span class="hljs-keyword">to</span><span class="hljs-built_in"> type </span><span class="hljs-string">'[]int</span><br></code></pre></div></td></tr></table></figure>

<h4 id="当函数的形参为interface-时，在函数中可以通过断言来判断interface的真实类型"><a href="#当函数的形参为interface-时，在函数中可以通过断言来判断interface的真实类型" class="headerlink" title="当函数的形参为interface{}时，在函数中可以通过断言来判断interface的真实类型"></a>当函数的形参为interface{}时，在函数中可以通过断言来判断interface的真实类型</h4><p>安全类型断言</p>
<figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go">&lt;目标类型值&gt;,&lt;布尔参数&gt; := &lt;表达式&gt;.(目标类型)<br></code></pre></div></td></tr></table></figure>

<p>非安全类型断言</p>
<figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go">&lt;目标类型值&gt; := &lt;表达式&gt;.(目标类型)<br></code></pre></div></td></tr></table></figure>

<p> 例子</p>
<figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span><br><br><span class="hljs-keyword">type</span> Student <span class="hljs-keyword">struct</span> &#123;<br>    Name <span class="hljs-keyword">string</span><br>    Age <span class="hljs-keyword">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> i <span class="hljs-keyword">interface</span>&#123;&#125; = <span class="hljs-built_in">new</span>(Student)<br>    s := i.(Student)<br><br>    fmt.Println(s)<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>此时非安全断言会产生panic</p>
<p>此时的i类型为 *Student 而非 Student</p>
<figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> i <span class="hljs-keyword">interface</span>&#123;&#125; = <span class="hljs-built_in">new</span>(Student)<br>    s, ok := i.(Student)<br>    <span class="hljs-keyword">if</span> ok &#123;<br>        fmt.Println(s)<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>采用安全类型断言即使失败也不会panic</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/63649977" target="_blank" rel="noopener">Go语言之关于 interface 的10个问题</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
</search>
